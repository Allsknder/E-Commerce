# This is the updated versions of the standard "Product" class (standard = the we've taken from dennis)
# This version contains the ability to modify the pixels of any uploaded preview image to desired pixels number (here 640x360) You can change it.
 
import PIL.Image
from django.core.files.base import ContentFile
from io import BytesIO

class Product(models.Model):
    name        = models.CharField(max_length=120)
    price       = models.DecimalField(max_digits=15, decimal_places=2)
    isDigital   = models.BooleanField(default=False) # Defaults to "Needs to be shipped"
    preview     = models.ImageField(blank=True)
    description = models.TextField(blank=True)
    # keywords    = models.CharField(max_length=120)
    # category    = models.ForiegnKey(Category, related_name='products')
    # stock       = models.PositiveIntegerField()
    # created     = models.DateTimeField(auto_now_add=True)
    # updated     = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name        

    @property
    def get_image_url(self):
        try:
            url = self.preview.url

        except:
            url = 'https://img.icons8.com/external-outline-design-circle/10000/000000/external-E-commerce-seo-development-and-marketing-outline-design-circle.png' 
            # In case the above URL breaks => You can use the image you have: 'http://localhost:8000/static/images/LogoLikeImageAlter.png'
        return url
    
    @property
    def get_more_images_urls(self):
        """This Property returns list of images urls that are related to one product"""
        try:
            imageUrls = []
            productImages = self.images.all() # This will return a Query Set (List of objects <images that are related to a product> ) of the type Image.
            for productImage in productImages:
                imageUrls.append(productImage.image.url)
        except:
            imageUrls = ["https://img.icons8.com/bubbles/1000/null/no-image.png"]
        return imageUrls

    def save(self, *args, **kwargs):
        '''For overriding the size in pixles to each preview image uploaded to the site (making it 640x360 for any image).'''
        super().save(*args, **kwargs)
        if self.preview: # if the Preivew Image exists...
            img = PIL.Image.open(self.preview.path)
            output_size = (640, 360)
            img = img.resize(output_size)
            buffer = BytesIO()
            img.save(buffer, format='JPEG')
            pillow_preview = ContentFile(buffer.getvalue())
            self.preview.save(self.preview.name, pillow_preview, save=False)
        super().save(*args, **kwargs)

